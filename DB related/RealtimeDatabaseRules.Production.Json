{
    /* Visit https://firebase.google.com/docs/database/security to learn more about security rules. */
    "rules": {

        /*Rules about the Users tree*/
        "Users": {
            "$uid": {
                ".write": "auth.uid == $uid || !data.exists()",
                ".read": "auth.uid == $uid",
                ".validate": "newData.hasChild('Username') && newData.child('Username').isString() || newData.hasChild('Username') ||newData.hasChild('Categories') || newData.hasChild('Tasks') || newData.hasChild('Assessments')",

                /*Rules about the Categories sub-tree*/
                "Categories": {
                    "$catid": {
                        ".validate": "newData.hasChild('Name')",

                        "Name": {
                            ".validate": "newData.isString()"
                        },
                        "ParentCategoryId": {
                            ".validate": "newData.isString() && root.child('Users/' + auth.uid + '/Categories/' + newData.val()).exists()"
                        },
                        "$other": {
                            ".validate": false
                        }
                    }
                },

                /*Rules about the Tasks sub-tree*/
                "Tasks": {
                    "$taskid": {
                        ".validate": "newData.hasChildren(['Name', 'StartDate', 'Method', 'CategoryId', 'Status'])",

                        "Name": {
                            ".validate": "newData.isString()"
                        },
                        "StartDate": {
                            ".validate": "newData.isString() && newData.val().matches(/^(1|2)[0-9][0-9][0-9][/\\/. ](0[1-9]|1[012])[/\\/. ](0[1-9]|[12][0-9]|3[01])$/)"
                        },
                        "EndDate": {
                            ".validate": "newData.isString() && newData.val().matches(/^(1|2)[0-9][0-9][0-9][/\\/. ](0[1-9]|1[012])[/\\/. ](0[1-9]|[12][0-9]|3[01])$/)"
                        },
                        "Method": {
                            ".validate": "newData.isString()"
                        },
                        "Status": {
                            ".validate": "newData.isString()"
                        },
                        "CategoryId": {
                            ".validate": "newData.isString() &&  root.child('Users/' + auth.uid + '/Categories/' + newData.val()).exists()"
                        },
                        "$other": {
                            ".validate": false
                        }
                    }
                },

                /*Rules about the Assessments sub-tree*/

                "Assessments": {
                    ".indexOn": "TaskId",

                    "$assessmentid": {
                        ".validate": "newData.hasChildren(['Date', 'Score', 'TaskId'])",

                        "Date": {
                            ".validate": "newData.isString() && newData.val().matches(/^(1|2)[0-9][0-9][0-9][/\\/. ](0[1-9]|1[012])[/\\/. ](0[1-9]|[12][0-9]|3[01])$/)"
                        },
                        "Score": {
                            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 10 && newData.val() % 1 == 0"
                        },
                        "TaskId": {
                            ".validate": "newData.isString() && root.child('Users/' + auth.uid + '/Tasks/' + newData.val()).exists()"
                        },
                        "Status": {
                            ".validate": "newData.isString()"
                        }
                    }
                }
            }
        }
    }
}